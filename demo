#!/bin/bash +x

# Check we only have one file and if so, unpack
if [ "`ls -1 *.zip | wc -l`" != "1" ] ; then
	echo "ERROR: more than one package?"
	exit 1
fi
PACKAGEZIP=`ls -1 *.zip | head -n 1`
echo "Package: ${PACKAGEZIP}"

VERSION=`echo $PACKAGEZIP | cut -d"." -f1 | cut -d"_" -f7`
BNAME=${VERSION}

unzip -d package ${PACKAGEZIP}

Code=false
if [ -f package/AMPolicyWriter.ear ]; then
  echo "Deploying CODE: Package contains code, so this deployment will update code."
  Code=true
  BNAME=${BNAME}_Code
else
  echo "NOT Deploying CODE: artifacts not in package."
fi

PD=false
if [ -f package/APM_ORA.zip ]; then
  echo "Deploying PD: Package contains APM"
  PD=true
  BNAME=${BNAME}_PD
else
  echo "NOT Deploying PD: artifact not in package."
fi

export BASTION="10.93.1.27"
export DEPLOYUSER="canaldeploy"
export SSHKEY="~/.ssh/canaldeploy"

export BASTIONSSH="ssh -A -q -t -i ~/.ssh/canaldeploy ${DEPLOYUSER}@${BASTION}"

ssh -q -A -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} rm -rf /tmp/deployment_CNLTRAIN2

# Stop Servers and get pre deploy status
if [ "${TRAIN}" == "true" ]; then
	echo Stopping TRAIN2 server
	${BASTIONSSH} <<-'ENDC'
	  DEPLOYUSER="canaldeploy"
	  SERVER="canaltrain2"
	  echo "Sending stop server to ${SERVER}"
	  ssh -t -t -A ${DEPLOYUSER}@${SERVER} sudo -i -u jboss sudo service jboss stop
	ENDC
	echo "TRAIN2 servers pre deploy"
	${BASTIONSSH} <<-'ENDC'
	  DEPLOYUSER="canaldeploy"
	  SERVER="canaltrain2"
	  echo "Pre deployment code on ${SERVER}"
	  ssh -t -t -A ${DEPLOYUSER}@${SERVER} sudo -i -u jboss cat /jboss/files/AMPolicyWriter/ReleaseAndBuildInfo.properties
	ENDC
	if [ "$Code" == "true" ]; then
	  for i in `ls -1 package | grep -v DB | grep -v APM`; do echo Copying $i to TRAIN2 bucket; aws --profile=canal s3 cp --no-progress package/$i s3://adpccanaltrainbkt/training/ ;  done
	fi
fi

# Copy packages to bastion

export DPLPTH=/home/oracle/deployments/CNL/TRAIN2/$(date +%m%d%y_%H%M)
echo "DB deployment staging directory: ${DPLPTH}"

ssh -A -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} mkdir /tmp/deployment_CNLTRAIN2
scp -i ${SSHKEY} package/DB_ORA*.zip ${DEPLOYUSER}@${BASTION}:/tmp/deployment_CNLTRAIN2

if [ "$Code" == "true" ] && [ "$PD" == "true" ]; then
scp -i ${SSHKEY} package/DB_ORA*.zip ${DEPLOYUSER}@${BASTION}:/tmp/deployment_CNLTRAIN2
ssh -A -q -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} sudo -i -u oracle mkdir -p ${DPLPTH}
ssh -A -q -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} sudo -i -u oracle unzip -d ${DPLPTH}/dbu /tmp/deployment_CNLTRAIN2/DB_ORA*.zip
fi

if [ "$PD" == "true" ]; then
scp -i ${SSHKEY} package/APM_ORA.zip ${DEPLOYUSER}@${BASTION}:/tmp/deployment_CNLTRAIN2
ssh -A -q -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} sudo -i -u oracle mkdir -p ${DPLPTH}
ssh -A -q -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} sudo -i -u oracle unzip -d ${DPLPTH}/apm /tmp/deployment_CNLTRAIN2/APM_ORA.zip
fi



# connection info
declare -A dbtns
declare -A dbusr
declare -A dbpwd

dbtns=( ["UAT"]="canal_uat"      ["TRAIN1"]="CANAL_TRAIN"    ["TRAIN2"]="CANAL_TRAIN"    ["TEST"]="CANAL_TEST"              )
dbusr=( ["UAT"]="canaluat"       ["TRAIN1"]="canaluat"       ["TRAIN2"]="train2"         ["TEST"]="CANALTEST_FROMCANALUAT"  )
dbpwd=( ["UAT"]="PwDbuat0AJy"    ["TRAIN1"]="o"              ["TRAIN2"]="trng123"        ["TEST"]="o"                       )

# DB upgrades
if [ "${TRAIN}" == "true" ] && [ "$Code" == "true" ] && [ "$PD" == "true" ]; then
	trgt=TRAIN2
	echo "Running this DBUpgrade on ${trgt}:"
	ssh -A -q -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} sudo -i -u oracle cat ${DPLPTH}/dbu/2090_DBBUILDINFO.SQL | grep -i insert | grep -i values
	echo ${dbtns[${trgt}]} ${dbusr[${trgt}]} ${dbpwd[${trgt}]} 
	echo "source /home/oracle/.bash_profile; cd ${DPLPTH}/dbu; /bin/sh ${DPLPTH}/dbu/DBUPGRADE.SH ${dbtns[${trgt}]} ${dbusr[${trgt}]} ${dbpwd[${trgt}]}" > rundbu_${trgt}.sh
	scp -i ${SSHKEY} rundbu_${trgt}.sh ${DEPLOYUSER}@${BASTION}:/tmp/deployment_CNLTRAIN2
	ssh -A -q -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} sudo -i -u oracle sh /tmp/deployment_CNLTRAIN2/rundbu_${trgt}.sh
	ssh -A -q -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} rm /tmp/deployment_CNLTRAIN2/rundbu_${trgt}.sh
	echo "DB Upgrade Errors on ${trgt} :"
	ssh -A -q -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} sudo -i -u oracle cat ${DPLPTH}/dbu/Inlog/${dbtns[${trgt}]}_${dbusr[${trgt}]}_ddl.log | grep ORA- || true
fi

# PM
if [ "$PD" == "true" ]; then
	echo "source /home/oracle/.bash_profile">> copydata.sh 
for i in `ssh -A -q -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} sudo -i -u oracle ls -1 ${DPLPTH}/apm/data/ | grep .dmp`; do
	echo echo Copying ${DPLPTH}/apm/data/$i to RDS >> copydata.sh
	echo time perl /home/oracle/scripts/copy_to_canaltrain2.pl ${DPLPTH}/apm/data/$i >> copydata.sh
done
sed -i -e 's/\r$//g' copydata.sh 
scp -i ${SSHKEY} copydata.sh ${DEPLOYUSER}@${BASTION}:/tmp/deployment_CNLTRAIN2
ssh -A -q -t -i ${SSHKEY} oracle@${BASTION} sh /tmp/deployment_CNLTRAIN2/copydata.sh
fi


if [ "${TRAIN}" == "true" ] && [ "$PD" == "true" ]; then
	trgt=TRAIN2
	echo "Running APM on ${trgt}:"
	echo ${dbtns[${trgt}]} ${dbusr[${trgt}]} ${dbpwd[${trgt}]} 
	echo "source /home/oracle/.bash_profile">> runapm_${trgt}.sh
	echo "cd ${DPLPTH}/apm; sh ${DPLPTH}/apm/apm.sh --command import ${dbtns[${trgt}]} ${dbusr[${trgt}]} ${dbpwd[${trgt}]} N" >> runapm_${trgt}.sh
	scp -i ${SSHKEY} runapm_${trgt}.sh ${DEPLOYUSER}@${BASTION}:/tmp/deployment_CNLTRAIN2
	ssh -A -q -t -i ${SSHKEY} oracle@${BASTION} sh /tmp/deployment_CNLTRAIN2/runapm_${trgt}.sh
	ssh -A -q -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} rm /tmp/deployment_CNLTRAIN2/runapm_${trgt}.sh
fi


if [ "${TRAIN}" == "true" ] && [ "$Code" == "true" ]; then
	echo Deploying to TRAIN2 server
	${BASTIONSSH} <<-'ENDC'
	  DEPLOYUSER="canaldeploy"
	  SERVER="canaltrain2"
	  echo "Sending deploy command to ${SERVER}"
	  ssh -t -t -A ${DEPLOYUSER}@${SERVER} sudo -i -u jboss /jboss/deploy -y
	ENDC
fi

if [ "${TRAIN}" == "true" ]; then
	echo Starting TRAN2 server
	${BASTIONSSH} <<-'ENDC'
	  DEPLOYUSER="canaldeploy"
	  SERVER="canaltrain2"
	  echo "Sending start command to ${SERVER}"
	  ssh -t -t -A ${DEPLOYUSER}@${SERVER} sudo -i -u jboss sudo service jboss start
	ENDC
	echo "TRAIN2 post deploy:"
	${BASTIONSSH} <<-'ENDC'
	  DEPLOYUSER="canaldeploy"
	  SERVER="canaltrain2"
	  echo "Post deploy status of ${SERVER}"
	  ssh -t -t -A ${DEPLOYUSER}@${SERVER} sudo -i -u jboss cat /jboss/files/AMPolicyWriter/ReleaseAndBuildInfo.properties
	ENDC
fi

ssh -q -A -t -i ${SSHKEY} ${DEPLOYUSER}@${BASTION} rm -rf /tmp/deployment_CNLTRAIN2

echo -n ${BNAME} > bname.txt
